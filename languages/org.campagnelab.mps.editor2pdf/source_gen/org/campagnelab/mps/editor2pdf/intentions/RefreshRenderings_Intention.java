package org.campagnelab.mps.editor2pdf.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import org.campagnelab.mps.editor2pdf.behavior.EditorAnnotation_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RefreshRenderings_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public RefreshRenderings_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.mps.editor2pdf.structure.PdfCollection";
  }

  public String getPresentation() {
    return "RefreshRenderings";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.mps.editor2pdf.intentions.RefreshRenderings_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.mps.editor2pdf";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "diagrams", true)).count() > 0;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:6bb9f222-b46c-45b3-85b5-99e8faaeadce(org.campagnelab.mps.editor2pdf.intentions)", "893392931327280422");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new RefreshRenderings_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Refresh Renderings";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      final Set<String> names = SetSequence.fromSet(new HashSet<String>());
      for (SNode svgExport : ListSequence.fromList(SLinkOperations.getTargets(node, "diagrams", true))) {
        SetSequence.fromSet(names).addElement(SPropertyOperations.getString(SLinkOperations.getTarget(svgExport, "diagram", false), "name"));
      }

      ListSequence.fromList(SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(node), "jetbrains.mps.lang.core.structure.BaseConcept")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("org.campagnelab.mps.editor2pdf.structure.EditorAnnotation")) != null) && SetSequence.fromSet(names).contains(SPropertyOperations.getString(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("org.campagnelab.mps.editor2pdf.structure.EditorAnnotation")), "name"));
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode concept) {
          editorContext.select(concept);
          final SNode annotation = AttributeOperations.getAttribute(concept, new IAttributeDescriptor.NodeAttribute("org.campagnelab.mps.editor2pdf.structure.EditorAnnotation"));

          if (LOG.isInfoEnabled()) {
            LOG.info("Rendering " + SPropertyOperations.getString(annotation, "name"));
          }
          final EditorCell cell = (EditorCell) editorContext.getSelectedCell();
          editorContext.getSelectionManager().clearSelection();
          if (LOG.isInfoEnabled()) {
            LOG.info("cell:" + cell);
          }
          if (SPropertyOperations.hasValue(annotation, "outputFormat", "1", "1")) {
            SNodeOperations.getModel(concept).getRepository().getModelAccess().runReadInEDT(new Runnable() {
              public void run() {
                EditorAnnotation_Behavior.call_renderNodeEditorToPDF_3568214513158969863(annotation, annotation, cell);
              }
            });
          }

        }
      });

    }

    public IntentionDescriptor getDescriptor() {
      return RefreshRenderings_Intention.this;
    }
  }

  protected static Logger LOG = LogManager.getLogger(RefreshRenderings_Intention.class);
}
