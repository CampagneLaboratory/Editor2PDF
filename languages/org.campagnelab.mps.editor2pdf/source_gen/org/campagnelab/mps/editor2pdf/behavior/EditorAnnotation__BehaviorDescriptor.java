package org.campagnelab.mps.editor2pdf.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.awt.Font;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Map;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.awt.Graphics2D;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.HashMap;
import com.google.common.escape.Escaper;
import com.google.common.html.HtmlEscapers;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import org.jfree.graphics2d.svg.SVGHints;
import java.util.Iterator;
import java.io.File;
import java.io.FileOutputStream;
import com.itextpdf.text.Document;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.awt.FontMapper;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.awt.PdfGraphics2D;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.editor.runtime.HeadlessEditorComponent;
import org.jfree.graphics2d.svg.SVGGraphics2D;
import java.awt.geom.AffineTransform;
import java.io.FileWriter;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class EditorAnnotation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(EditorAnnotation__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, "org.campagnelab.mps.editor2pdf.structure.EditorAnnotation");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Font> getFont_id1FWBPQDou_F = new SMethodBuilder<Font>(new SJavaCompoundTypeImpl(Font.class)).name("getFont").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1FWBPQDou_F").registry(REGISTRY).build();
  public static final SMethod<Map<String, String>> getHints_id3WlLGfGFQJR = new SMethodBuilder<Map<String, String>>(new SJavaCompoundTypeImpl(Map.class)).name("getHints").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3WlLGfGFQJR").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Map<String, String>> getIdRefHints_id3xJFGTMthu4 = new SMethodBuilder<Map<String, String>>(new SJavaCompoundTypeImpl(Map.class)).name("getIdRefHints").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3xJFGTMthu4").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> visit_id7OORWOlZVvH = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("visit").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7OORWOlZVvH").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorCell.class, ""), SMethodBuilder.createJavaParameter(Graphics2D.class, ""), SMethodBuilder.createJavaParameter(ParentSettings.class, ""), SMethodBuilder.createJavaParameter(SNode.class, ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<Void> visit_id7OORWOlZWwA = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("visit").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7OORWOlZWwA").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorCell_Collection.class, ""), SMethodBuilder.createJavaParameter(Graphics2D.class, ""), SMethodBuilder.createJavaParameter(ParentSettings.class, ""), SMethodBuilder.createJavaParameter(SNode.class, ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<Void> visit_id7OORWOlZWX0 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("visit").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7OORWOlZWX0").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorCell_Component.class, ""), SMethodBuilder.createJavaParameter(Graphics2D.class, ""), SMethodBuilder.createJavaParameter(ParentSettings.class, ""), SMethodBuilder.createJavaParameter(SNode.class, ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<Void> renderNodeEditorToPDF_id7OORWOlZu74 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("renderNodeEditorToPDF").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7OORWOlZu74").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<org.jetbrains.mps.openapi.model.SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(EditorCell.class, ""));
  public static final SMethod<Void> renderSvg_idTE4nIlnV$W = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("renderSvg").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("TE4nIlnV$W").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<org.jetbrains.mps.openapi.model.SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SVGWriter.class, ""), SMethodBuilder.createJavaParameter(SRepository.class, ""));
  public static final SMethod<Void> renderNodeEditorToSVG_id46q0f$BiLBY = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("renderNodeEditorToSVG").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46q0f$BiLBY").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<org.jetbrains.mps.openapi.model.SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(EditorCell.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFont_id1FWBPQDou_F, getHints_id3WlLGfGFQJR, getIdRefHints_id3xJFGTMthu4, visit_id7OORWOlZVvH, visit_id7OORWOlZWwA, visit_id7OORWOlZWX0, renderNodeEditorToPDF_id7OORWOlZu74, renderSvg_idTE4nIlnV$W, renderNodeEditorToSVG_id46q0f$BiLBY);

  private static void ___init___(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__) {
    SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo"), ListSequence.fromList(SModelOperations.rootsIncludingImported(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c995462L, "org.campagnelab.mps.editor2pdf.structure.DefaultOutputDirectory"))).first());
    SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0x4aa50c0bd1ec9bf1L, "outputFormat"), "1");
  }

  /*package*/ static Font getFont_id1FWBPQDou_F(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__) {
    return new Font("Monospaced", Font.PLAIN, 14);
  }
  /*package*/ static Map<String, String> getHints_id3WlLGfGFQJR(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, String key, String value) {
    Map<String, String> result = new HashMap<String, String>();
    result.put(key, value);
    return result;
  }
  /*package*/ static Map<String, String> getIdRefHints_id3xJFGTMthu4(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, String id, String ref) {
    Map<String, String> result = new HashMap<String, String>();
    Escaper htmlEscaper = HtmlEscapers.htmlEscaper();
    result.put("id", htmlEscaper.escape(id));
    if (ref != null) {
      result.put("ref", htmlEscaper.escape(ref));
    }
    return result;
  }
  /*package*/ static void visit_id7OORWOlZVvH(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, EditorCell cell, Graphics2D g2d, ParentSettings settings, SNode previousNode, boolean addHints) {

    Style style = cell.getStyle();
    boolean navigation = false;
    SNode node = (SNode) cell.getSNode();
    if (node != previousNode) {
      //  this is a different node, let's record the identity of this node and make its rendering  
      //  a group in the SVG document: 
      String id = String.format("{\"moduleId\"=\"%s\", \"modelId\"=\"%s\", \"nodeId\"=\"%s\"", node.getModel().getModule().getModuleId().toString(), node.getModel().getModelId().toString(), node.getNodeId().toString());
      String ref = null;
      SNode navNode = null;
      // if a navigatable style is defined on the node, add a reference to the target in the SVG: 
      if (style.isSpecified(StyleAttributes.NAVIGATABLE_NODE)) {
        navNode = (SNode) style.get(StyleAttributes.NAVIGATABLE_NODE);
      }
      if (style.isSpecified(StyleAttributes.NAVIGATABLE_REFERENCE)) {
        String referenceRole = style.get(StyleAttributes.NAVIGATABLE_REFERENCE);
        navNode = node.getReferenceTarget(referenceRole);
      }
      if (navNode != null) {
        ref = String.format("{\"moduleId\"=\"%s\" \"modelId\"=\"%s\" \"nodeId\"=\"%s\"", navNode.getModel().getModule().getModuleId().toString(), navNode.getModel().getModelId().toString(), navNode.getNodeId().toString());
      }
      if (addHints) {
        g2d.setRenderingHint(SVGHints.KEY_BEGIN_GROUP, EditorAnnotation__BehaviorDescriptor.getIdRefHints_id3xJFGTMthu4.invoke(__thisNode__, id, ref));
      }
      navigation = true;
      previousNode = node;
    }

    if (cell instanceof EditorCell_Collection) {
      EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZWwA.invoke(__thisNode__, ((EditorCell_Collection) cell), g2d, settings, previousNode, ((boolean) addHints));
    } else {
      jetbrains.mps.nodeEditor.cells.EditorCell aCell = ((jetbrains.mps.nodeEditor.cells.EditorCell) cell);
      aCell.paintCell(g2d, settings);
    }
    if (cell instanceof EditorCell_Component) {
      EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZWX0.invoke(__thisNode__, ((EditorCell_Component) cell), g2d, settings, previousNode, ((boolean) addHints));
    }
    if (navigation) {
      g2d.setRenderingHint(SVGHints.KEY_END_GROUP, Boolean.TRUE);
      navigation = false;
    }
  }
  /*package*/ static void visit_id7OORWOlZWwA(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, EditorCell_Collection collection, Graphics2D g2d, ParentSettings settings, SNode previousNode, boolean addHints) {
    Iterator<EditorCell> it = collection.iterator();
    while (it.hasNext()) {
      EditorCell cell = it.next();
      EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZVvH.invoke(__thisNode__, cell, g2d, settings, previousNode, ((boolean) addHints));
    }
  }
  /*package*/ static void visit_id7OORWOlZWX0(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, EditorCell_Component component, Graphics2D g2d, ParentSettings settings, SNode previousNode, boolean addHints) {
    g2d.translate(component.getX(), component.getY());
    g2d.setFont(EditorAnnotation__BehaviorDescriptor.getFont_id1FWBPQDou_F.invoke(__thisNode__));
    component.getComponent().doLayout();
    component.getComponent().paint(g2d);
    g2d.translate(-component.getX(), -component.getY());
  }
  /*package*/ static void renderNodeEditorToPDF_id7OORWOlZu74(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, org.jetbrains.mps.openapi.model.SNode annotation, EditorCell editorCell) {
    // jetbrains.mps.nodeEditor.cells.EditorCell 

    String dir = ((SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")) == null) ? "." : SPropertyOperations.getString(SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")), MetaAdapterFactory.getProperty(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c993928L, 0xc65f8233c993964L, "path")));
    try {
      File pdfFile = new File(dir + "/" + SPropertyOperations.getString(annotation, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".pdf");
      FileOutputStream stream = new FileOutputStream(pdfFile);
      editorCell.relayout();

      int width = editorCell.getWidth() + editorCell.getX();
      int height = editorCell.getHeight() + editorCell.getY();
      Document document = new Document(new Rectangle(editorCell.getWidth(), editorCell.getHeight()));
      document.setMargins(0, 0, 0, 0);
      PdfWriter writer = PdfWriter.getInstance(document, stream);
      BaseFont bf;
      FontMapper fontMapper = null;
      if ((SLinkOperations.getTarget(SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")), MetaAdapterFactory.getContainmentLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c993928L, 0x2b38d40c9f277226L, "font")) != null) && new File(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")), MetaAdapterFactory.getContainmentLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c993928L, 0x2b38d40c9f277226L, "font")), MetaAdapterFactory.getProperty(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x2b38d40c9f277222L, 0x2b38d40c9f277223L, "filename"))).exists()) {
        bf = BaseFont.createFont(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")), MetaAdapterFactory.getContainmentLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c993928L, 0x2b38d40c9f277226L, "font")), MetaAdapterFactory.getProperty(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x2b38d40c9f277222L, 0x2b38d40c9f277223L, "filename")), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        final com.itextpdf.text.Font monospaced = new com.itextpdf.text.Font(bf, 14);
        fontMapper = new FontMapper() {
          public Font pdfToAwt(BaseFont p0, int p1) {
            return new Font("Monospaced", Font.PLAIN, 14);
          }
          public BaseFont awtToPdf(Font p0) {
            return monospaced.getBaseFont();
          }
        };
      }
      document.open();
      PdfContentByte cb = writer.getDirectContent();
      PdfTemplate template = cb.createTemplate(width, height);
      ParentSettings settings = new ParentSettings();
      Graphics2D g2D = (fontMapper == null ? new PdfGraphics2D(template, width, height) : new PdfGraphics2D(template, width, height, fontMapper));
      g2D.setFont(EditorAnnotation__BehaviorDescriptor.getFont_id1FWBPQDou_F.invoke(__thisNode__));
      EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZVvH.invoke(__thisNode__, editorCell, g2D, settings, null, ((boolean) false));
      g2D.dispose();
      cb.addTemplate(template, -editorCell.getX(), 0);

      document.close();
      LoggingRuntime.logMsgView(Level.INFO, "Editor PDF rendered to " + pdfFile.getAbsolutePath(), EditorAnnotation__BehaviorDescriptor.class, null, null);
    } catch (Exception e) {
      LoggingRuntime.logMsgView(Level.ERROR, "Exception", EditorAnnotation__BehaviorDescriptor.class, e, null);
      e.printStackTrace();
    }


  }
  /*package*/ static void renderSvg_idTE4nIlnV$W(@NotNull final org.jetbrains.mps.openapi.model.SNode __thisNode__, final org.jetbrains.mps.openapi.model.SNode node, final SVGWriter writer, final SRepository repository) {
    repository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        try {
          HeadlessEditorComponent editorComponent = new HeadlessEditorComponent(null, repository);
          editorComponent.setFont(new Font("Courier New", Font.PLAIN, 10));
          editorComponent.editNode(node);
          editorComponent.doLayout();
          jetbrains.mps.nodeEditor.cells.EditorCell editorCell = editorComponent.findNodeCell(node);
          int width = editorCell.getWidth() + editorCell.getX();
          int height = editorCell.getHeight() + editorCell.getY();
          StringBuilder builder = new StringBuilder();
          SVGGraphics2D g2d = new SVGGraphics2D(editorCell.getWidth(), editorCell.getHeight());
          ParentSettings settings = new ParentSettings();
          g2d.setTransform(AffineTransform.getTranslateInstance(-editorCell.getX(), -editorCell.getY()));
          g2d.setFont(Font.getFont("Courier New"));
          EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZVvH.invoke(__thisNode__, editorCell, g2d, settings, null, ((boolean) true));
          g2d.dispose();
          String svg = g2d.getSVGElement();
          writer.write(svg);
          writer.close();
        } catch (Exception e) {
          LoggingRuntime.logMsgView(Level.ERROR, "Failed to render: " + e.getMessage(), EditorAnnotation__BehaviorDescriptor.class, e, null);
        }

      }
    });

  }
  /*package*/ static void renderNodeEditorToSVG_id46q0f$BiLBY(@NotNull org.jetbrains.mps.openapi.model.SNode __thisNode__, org.jetbrains.mps.openapi.model.SNode annotation, EditorCell editorCell) {
    // jetbrains.mps.nodeEditor.cells.EditorCell 

    String dir = ((SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")) == null) ? "." : SPropertyOperations.getString(SLinkOperations.getTarget(annotation, MetaAdapterFactory.getReferenceLink(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, 0xc65f8233c99545fL, "outputTo")), MetaAdapterFactory.getProperty(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0xc65f8233c993928L, 0xc65f8233c993964L, "path")));
    try {
      File svgFile = new File(dir + "/" + SPropertyOperations.getString(annotation, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".svg");
      FileWriter writer = new FileWriter(svgFile);
      editorCell.relayout();

      int width = editorCell.getWidth() + editorCell.getX();
      int height = editorCell.getHeight() + editorCell.getY();
      StringBuilder builder = new StringBuilder();
      SVGGraphics2D g2d = new SVGGraphics2D(editorCell.getWidth(), editorCell.getHeight());
      ParentSettings settings = new ParentSettings();
      g2d.setTransform(AffineTransform.getTranslateInstance(-editorCell.getX(), -editorCell.getY()));
      g2d.setFont(Font.getFont("Courier New"));
      if (LOG.isInfoEnabled()) {
        LoggingRuntime.legacyLog(Level.INFO, "About to render the node", EditorAnnotation__BehaviorDescriptor.class, null);
      }
      EditorAnnotation__BehaviorDescriptor.visit_id7OORWOlZVvH.invoke(__thisNode__, editorCell, g2d, settings, null, ((boolean) true));
      g2d.dispose();
      writer.write(g2d.getSVGElement());
      writer.close();
      if (LOG.isInfoEnabled()) {
        LoggingRuntime.legacyLog(Level.INFO, "Editor SVG rendered to " + svgFile.getAbsolutePath(), EditorAnnotation__BehaviorDescriptor.class, null);
      }
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LoggingRuntime.legacyLog(Level.ERROR, "Exception", EditorAnnotation__BehaviorDescriptor.class, e);
      }
      e.printStackTrace();
    }


  }

  /*package*/ EditorAnnotation__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull org.jetbrains.mps.openapi.model.SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull org.jetbrains.mps.openapi.model.SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Font) getFont_id1FWBPQDou_F(node));
      case 1:
        return (T) ((Map<String, String>) getHints_id3WlLGfGFQJR(node, (String) parameters[0], (String) parameters[1]));
      case 2:
        return (T) ((Map<String, String>) getIdRefHints_id3xJFGTMthu4(node, (String) parameters[0], (String) parameters[1]));
      case 3:
        visit_id7OORWOlZVvH(node, (EditorCell) parameters[0], (Graphics2D) parameters[1], (ParentSettings) parameters[2], (SNode) parameters[3], ((boolean) (Boolean) parameters[4]));
        return null;
      case 4:
        visit_id7OORWOlZWwA(node, (EditorCell_Collection) parameters[0], (Graphics2D) parameters[1], (ParentSettings) parameters[2], (SNode) parameters[3], ((boolean) (Boolean) parameters[4]));
        return null;
      case 5:
        visit_id7OORWOlZWX0(node, (EditorCell_Component) parameters[0], (Graphics2D) parameters[1], (ParentSettings) parameters[2], (SNode) parameters[3], ((boolean) (Boolean) parameters[4]));
        return null;
      case 6:
        renderNodeEditorToPDF_id7OORWOlZu74(node, (org.jetbrains.mps.openapi.model.SNode) parameters[0], (EditorCell) parameters[1]);
        return null;
      case 7:
        renderSvg_idTE4nIlnV$W(node, (org.jetbrains.mps.openapi.model.SNode) parameters[0], (SVGWriter) parameters[1], (SRepository) parameters[2]);
        return null;
      case 8:
        renderNodeEditorToSVG_id46q0f$BiLBY(node, (org.jetbrains.mps.openapi.model.SNode) parameters[0], (EditorCell) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
